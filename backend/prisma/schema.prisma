// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
     engineType = "library" // solution for prisma client error  put engine as library or binary after making changes to this file always run npx prisma generate --no-engine
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // user direct db url as (url) first then run migrate command after running migrate cmd make it directUrl() and use connection pool url  as main url
  directUrl = env("DIRECT_URL")

}


model User {
  id String @id  @default(uuid())
  email String @unique
  first_name String? 
  last_name String?
  password String
  image String?       
  pronoun String?
  domain String?
  un_watched Int?
  watched Int?
  about String?
  domain_title String?
  cover_image String?
  like Likes[]
  comment Comments[]
  post Post[]
  settings Settings[]
  notification Notification[]
}

model Post {
  id String @id @default(uuid())
  user_id String
  created_at DateTime @default(now())
  category String
  content Content[]
  images Images[] 
  likes Likes[]
  comments Comments[]
  notification Notification[]
  user User @relation(fields: [user_id],references: [id],onDelete: Cascade,onUpdate:Cascade)
}

model Likes{
  id String  @default(uuid()) @unique
  user_id String 
  post_id String
  user User @relation(fields: [user_id],references: [id], onDelete: Cascade, onUpdate: Cascade) 
  notification Notification[]
  post Post  @relation(fields: [post_id],references: [id],onDelete: Cascade, onUpdate: Cascade)
  @@id([user_id,post_id]) 
}
model Content{
  id String @default(uuid())
  blocks Json
  post_id String 
  post Post @relation(fields: [post_id],references: [id],onDelete:Cascade,onUpdate:Cascade)
   @@id([id,post_id])

}

model Comments {
  id String @default(uuid()) @unique
  user_id String
  post_id String
  timestamp DateTime @default(now())
  text String
  user User @relation(fields: [user_id],references: [id],onDelete:Cascade, onUpdate: Cascade)
  post Post @relation(fields:[post_id],references: [id],onDelete: Cascade, onUpdate: Cascade)
  @@id([id,post_id])
  notification Notification[]
}

model Images {
  id String @default(uuid()) 
  image String?
  post_id String  
  post Post @relation(fields: [post_id],references: [id],onDelete:Cascade, onUpdate: Cascade)
  @@id([id,post_id])
}

model Settings{
  id String @default(uuid())
  user_id String     
  comments Boolean?
  post_uploads  Boolean?
  likes Boolean?
  shares Boolean?
  users User @relation(fields: [user_id],references: [id],onDelete:Cascade,onUpdate:Cascade)
  @@id([id,user_id])
}

model Notification{
id String  @default(uuid())
type String
timestamp DateTime @default(now())
like_id String?
likes Likes? @relation(fields: [like_id],references: [id],onDelete: Cascade,onUpdate: Cascade)
user_id String
owner_id String
msg String
user User @relation(fields: [user_id],references: [id],onDelete: Cascade,onUpdate: Cascade)
post_id String?
post Post? @relation(fields: [post_id],references: [id],onDelete: Cascade,onUpdate: Cascade)
comment_id String?
comments Comments? @relation(fields: [comment_id],references: [id], onDelete:Cascade,onUpdate: Cascade)
@@id([id,owner_id])
}

model RateLimiter {
 id String @default(uuid())
 user_id String
 Requests Int
 @@id([id,user_id])
}